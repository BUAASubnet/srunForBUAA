name: Build Releases
on:
  release:
    types: [published]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  AUTH_SERVER_IP: ${{ secrets.AUTH_SERVER_IP }}

jobs:
  build-cross:
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
      # 添加 RUSTFLAGS 来修复 nightly panic 策略变更问题
      RUSTFLAGS: "-Zunstable-options -Cpanic=immediate-abort"
    strategy:
      matrix:
        target:
          - i686-unknown-linux-musl
          - x86_64-unknown-linux-musl
          - armv7-unknown-linux-musleabihf
          - arm-unknown-linux-musleabi
          - arm-unknown-linux-musleabihf
          - aarch64-unknown-linux-musl

    steps:
      - uses: actions/checkout@v4

      - name: Install dependences
        run: sudo apt-get update -y && sudo apt-get install -y upx;

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          # 更新到最新的 nightly
          toolchain: nightly
          
      - name: Update dependencies
        run: cargo update
        
      - name: Install cross
        run: cargo install cross

      - name: Build ${{ matrix.target }}
        timeout-minutes: 120
        shell: bash
        run: |
          compile_target=${{ matrix.target }}
          compile_compress="-u"

          cd build
          # Add -f tls to enable TLS feature
          ./build-release.sh -t ${{ matrix.target }} -f tls $compile_compress

      - name: Upload Github Assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: build/release/*
          prerelease: ${{ contains(github.ref, '-') }}

  build-unix:
    runs-on: ${{ matrix.os }}
    env:
      RUST_BACKTRACE: full
      # 添加 RUSTFLAGS 来修复 nightly panic 策略变更问题
      RUSTFLAGS: "-Zunstable-options -Cpanic=immediate-abort"
    strategy:
      matrix:
        os: [macos-latest]
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v4

      - name: Install GNU tar
        if: runner.os == 'macOS'
        run: |
          brew install gnu-tar
          echo "/usr/local/opt/gnu-tar/libexec/gnubin" >> $GITHUB_PATH

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          # 更新到最新的 nightly
          toolchain: nightly
          targets: ${{ matrix.target }}

      - name: Update dependencies
        run: cargo update
        
      - name: Build release
        shell: bash
        run: |
          # Add -f tls to enable TLS feature
          ./build/build-host-release.sh -t ${{ matrix.target }} -f tls

      - name: Upload Github Assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: build/release/*
          prerelease: ${{ contains(github.ref, '-') }}

  build-windows:
    runs-on: windows-latest
    env:
      # 在现有 RUSTFLAGS 基础上追加新的标志
      RUSTFLAGS: "-C target-feature=+crt-static -Zunstable-options -Cpanic=immediate-abort"
      RUST_BACKTRACE: full
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - i686-pc-windows-msvc
          - aarch64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4

      - name: Install nasm
        uses: ilammy/setup-nasm@v1
        
      - name: Install C++ build tools
        run: |
          echo "Downloading VS Build Tools using curl..."
          curl.exe -L -o vs_buildtools.exe "https://aka.ms/vs/17/release/vs_buildtools.exe"
          echo "Download complete. Starting installation..."
          start-process -wait -filepath vs_buildtools.exe -ArgumentList '--quiet --wait --norestart --nocache --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.VC.Tools.arm64 --add Microsoft.VisualStudio.Component.Windows11SDK.22621'
          echo "Installation complete."
        shell: pwsh
        
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
        
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          # 更新到最新的 nightly
          toolchain: nightly
          
      - name: Update dependencies
        run: cargo update
        
      - name: Build release
        run: |
          # Add -f tls to enable TLS feature
          pwsh ./build/build-host-release.ps1 -t ${{ matrix.target }} -f tls

      - name: Upload Github Assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: build/release/*
          prerelease: ${{ contains(github.ref, '-') }}